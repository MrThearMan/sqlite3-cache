{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLite3 Cache pip install sqlite3-cache Documentation : https://mrthearman.github.io/sqlite3-cache/ Source Code : https://github.com/MrThearMan/sqlite3-cache/ Contributing : https://github.com/MrThearMan/sqlite3-cache/blob/main/CONTRIBUTING.md Use SQLite3 as quick, persistent, thread-safe cache. Can store any picklable objects. from sqlite3_cache import Cache cache = Cache () Quickstart Interface works similarly to Django's cache interface with a few additions. Values stay in the cache even if the given timeout is reached, and only get deleted on the next call to clear , or any of these methods: get , get_or_set , get_many , delete , delete_many , ttl , or ttl_many for that key. Supports indexing: cache[\"key\"] = \"value\" cache[\"key\"] del cache[\"key\"] Supports membership test: \"key\" in cache Can be used as a context manager: with Cache() as cache: ...","title":"Home"},{"location":"#sqlite3-cache","text":"pip install sqlite3-cache Documentation : https://mrthearman.github.io/sqlite3-cache/ Source Code : https://github.com/MrThearMan/sqlite3-cache/ Contributing : https://github.com/MrThearMan/sqlite3-cache/blob/main/CONTRIBUTING.md Use SQLite3 as quick, persistent, thread-safe cache. Can store any picklable objects. from sqlite3_cache import Cache cache = Cache ()","title":"SQLite3 Cache"},{"location":"#quickstart","text":"Interface works similarly to Django's cache interface with a few additions. Values stay in the cache even if the given timeout is reached, and only get deleted on the next call to clear , or any of these methods: get , get_or_set , get_many , delete , delete_many , ttl , or ttl_many for that key. Supports indexing: cache[\"key\"] = \"value\" cache[\"key\"] del cache[\"key\"] Supports membership test: \"key\" in cache Can be used as a context manager: with Cache() as cache: ...","title":"Quickstart"},{"location":"ref/","text":"API Reference Cache(...) \u2192 Cache filename: str = \".cache\" - Cache file name. path: str = None - Path string to the wanted db location. If None, use current directory. in_memory: bool = True - Create database in-memory only. File is still created, but nothing is stored in it. timeout: int - How long to wait for another connection to finnish executing before throwing an exception. kwargs: Pragma settings. https://www.sqlite.org/pragma.html Create a new cache in the specified location. The class itself is not a singleton, but cache instances with the same filename and path will share the same cache, and the latter instance will not clear the cache on instantiation. cache.close() \u2192 None Closes the cache. cache.add(...) \u2192 None key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Set the value to the cache only if the key is not already in the cache, or the found value has expired. cache.get(...) \u2192 Any key: str \u2014 Cache key. default: Any = None \u2014 Value to return if key not in the cache. Get the value under some key. Return default if key not in the cache or expired. cache.set(...) \u2192 None key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Set a value in cache under some key. cache.update(...) \u2192 None key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. Update value in the cache. Does nothing if key not in the cache or expired. cache.touch(...) \u2192 None key: str \u2014 Cache key. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in cache. Negative numbers will keep the key in cache until manually removed. Extend the lifetime of an object in cache. Does nothing if key is not in the cache or is expired. cache.delete(...) \u2192 None key: str \u2014 Cache key. Remove the value under the given key from the cache. cache.add_many(...) \u2192 None dict_: dict[str, Any] \u2014 Cache keys with values to add. timeout: int = DEFAULT_TIMEOUT \u2014 How long the values are valid in the cache. Negative numbers will keep the key in cache until manually removed. For all keys in the given dict, add the value to the cache only if the key is not already in the cache, or the found value has expired. cache.get_many(...) \u2192 dict[str, Any] keys: list[str] \u2014 List of cache keys. Get all values that exist and aren't expired from the given cache keys, and return a dict. cache.set_many(...) \u2192 None dict_: dict[str, Any] \u2014 Cache keys with values to set. timeout: int = DEFAULT_TIMEOUT \u2014 How long the values are valid in the cache. Negative numbers will keep the key in cache until manually removed. Set values to the cache for all keys in the given dict. cache.update_many(...) \u2192 None dict_: dict[str, Any] \u2014 Cache keys with values to update to. Update values to the cache for all keys in the given dict. Does nothing if key not in cache or expired. cache.touch_many(...) \u2192 None keys: list[str] \u2014 List of cache keys. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in cache. Negative numbers will keep the key in cache until manually removed. Extend the lifetime for all objects under the given keys in cache. Does nothing if a key is not in the cache or is expired. cache.delete_many(...) \u2192 None keys: list[str] \u2014 List of cache keys. Remove all the values under the given keys from the cache. cache.get_or_set(...) \u2192 Any key: str \u2014 Cache key. default: Any \u2014 Picklable object to store if key is not in cache. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Get a value under some key, or set the default if key is not in cache. cache.clear() \u2192 None Clear the cache from all values. cache.incr(...) \u2192 int key: str \u2014 Cache key. delta: int = 1 \u2014 How much to increment. Increment the value in cache by the given delta. Note that this is not an atomic transaction! cache.decr(...) \u2192 int key: str \u2014 Cache key. delta: int = 1 \u2014 How much to decrement. Decrement the value in cache by the given delta. Note that this is not an atomic transaction! @cache.memoize(...) -> Callable[..., Any] timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Save the result of the decorated function in cache. Calls with different arguments are saved under different keys. @cache.ttl(...) -> int key: str \u2014 Cache key. How long the key is still valid in the cache in seconds. Returns -1 if the value for the key does not expire. Returns -2 if the value for the key has expired, or has not been set. @cache.ttl_many(...) -> dict[str, int] keys: list[str] \u2014 List of cache keys. How long the given keys are still valid in the cache in seconds. Returns -1 if a value for the key does not expire. Returns -2 if a value for the key has expired, or has not been set. @cache.get_all_keys() -> list[str] Get all keys that exist in the cache for currently valid cache items. Returns a list of cache keys in naturally sorted order. @cache.find_matching_keys(...) -> list[str] like_match_pattern: str \u2013 A string formatted for SQL LIKE operator comparison. Find keys that match a SQL LIKE pattern. Returns a list of matching keys. @cache.find_keys_starting_with(...) -> list[str] pattern: str \u2013 The pattern to match at the start of the key. Find keys that start with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items. @cache.find_keys_ending_with(...) -> list[str] pattern: str \u2013 The pattern to match at the end of the key. Find keys that end with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items. @cache.find_keys_containing(...) -> list[str] pattern: str \u2013 The pattern to find in matching keys. Find keys that contain the given pattern anywhere in the string. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items. @cache.clear_matching_keys(...) -> None like_match_pattern: str \u2013 A string formatted for SQL LIKE operator comparison. Clear keys that match a SQL LIKE pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . @cache.clear_keys_starting_with(...) -> None pattern: str \u2013 The pattern to match at the start of the key. Clear all keys from the cache that start with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . @cache.clear_keys_ending_with(...) -> None pattern: str \u2013 The pattern to match at the end of the key. Clear all keys from the cache that end with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . @cache.clear_keys_containing(...) -> None pattern: str \u2013 The pattern to find in matching keys. Clear keys that contain the given pattern anywhere in the string. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' .","title":"API Reference"},{"location":"ref/#api-reference","text":"","title":"API Reference"},{"location":"ref/#cache-cache","text":"filename: str = \".cache\" - Cache file name. path: str = None - Path string to the wanted db location. If None, use current directory. in_memory: bool = True - Create database in-memory only. File is still created, but nothing is stored in it. timeout: int - How long to wait for another connection to finnish executing before throwing an exception. kwargs: Pragma settings. https://www.sqlite.org/pragma.html Create a new cache in the specified location. The class itself is not a singleton, but cache instances with the same filename and path will share the same cache, and the latter instance will not clear the cache on instantiation.","title":"Cache(...) \u2192 Cache"},{"location":"ref/#cacheclose-none","text":"Closes the cache.","title":"cache.close() \u2192 None"},{"location":"ref/#cacheadd-none","text":"key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Set the value to the cache only if the key is not already in the cache, or the found value has expired.","title":"cache.add(...) \u2192 None"},{"location":"ref/#cacheget-any","text":"key: str \u2014 Cache key. default: Any = None \u2014 Value to return if key not in the cache. Get the value under some key. Return default if key not in the cache or expired.","title":"cache.get(...) \u2192 Any"},{"location":"ref/#cacheset-none","text":"key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Set a value in cache under some key.","title":"cache.set(...) \u2192 None"},{"location":"ref/#cacheupdate-none","text":"key: str \u2014 Cache key. value: Any \u2014 Picklable object to store. Update value in the cache. Does nothing if key not in the cache or expired.","title":"cache.update(...) \u2192 None"},{"location":"ref/#cachetouch-none","text":"key: str \u2014 Cache key. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in cache. Negative numbers will keep the key in cache until manually removed. Extend the lifetime of an object in cache. Does nothing if key is not in the cache or is expired.","title":"cache.touch(...) \u2192 None"},{"location":"ref/#cachedelete-none","text":"key: str \u2014 Cache key. Remove the value under the given key from the cache.","title":"cache.delete(...) \u2192 None"},{"location":"ref/#cacheadd_many-none","text":"dict_: dict[str, Any] \u2014 Cache keys with values to add. timeout: int = DEFAULT_TIMEOUT \u2014 How long the values are valid in the cache. Negative numbers will keep the key in cache until manually removed. For all keys in the given dict, add the value to the cache only if the key is not already in the cache, or the found value has expired.","title":"cache.add_many(...) \u2192 None"},{"location":"ref/#cacheget_many-dictstr-any","text":"keys: list[str] \u2014 List of cache keys. Get all values that exist and aren't expired from the given cache keys, and return a dict.","title":"cache.get_many(...) \u2192 dict[str, Any]"},{"location":"ref/#cacheset_many-none","text":"dict_: dict[str, Any] \u2014 Cache keys with values to set. timeout: int = DEFAULT_TIMEOUT \u2014 How long the values are valid in the cache. Negative numbers will keep the key in cache until manually removed. Set values to the cache for all keys in the given dict.","title":"cache.set_many(...) \u2192 None"},{"location":"ref/#cacheupdate_many-none","text":"dict_: dict[str, Any] \u2014 Cache keys with values to update to. Update values to the cache for all keys in the given dict. Does nothing if key not in cache or expired.","title":"cache.update_many(...) \u2192 None"},{"location":"ref/#cachetouch_many-none","text":"keys: list[str] \u2014 List of cache keys. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in cache. Negative numbers will keep the key in cache until manually removed. Extend the lifetime for all objects under the given keys in cache. Does nothing if a key is not in the cache or is expired.","title":"cache.touch_many(...) \u2192 None"},{"location":"ref/#cachedelete_many-none","text":"keys: list[str] \u2014 List of cache keys. Remove all the values under the given keys from the cache.","title":"cache.delete_many(...) \u2192 None"},{"location":"ref/#cacheget_or_set-any","text":"key: str \u2014 Cache key. default: Any \u2014 Picklable object to store if key is not in cache. timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Get a value under some key, or set the default if key is not in cache.","title":"cache.get_or_set(...) \u2192 Any"},{"location":"ref/#cacheclear-none","text":"Clear the cache from all values.","title":"cache.clear() \u2192 None"},{"location":"ref/#cacheincr-int","text":"key: str \u2014 Cache key. delta: int = 1 \u2014 How much to increment. Increment the value in cache by the given delta. Note that this is not an atomic transaction!","title":"cache.incr(...) \u2192 int"},{"location":"ref/#cachedecr-int","text":"key: str \u2014 Cache key. delta: int = 1 \u2014 How much to decrement. Decrement the value in cache by the given delta. Note that this is not an atomic transaction!","title":"cache.decr(...) \u2192 int"},{"location":"ref/#cachememoize-callable-any","text":"timeout: int = DEFAULT_TIMEOUT \u2014 How long the value is valid in the cache. Negative numbers will keep the key in cache until manually removed. Save the result of the decorated function in cache. Calls with different arguments are saved under different keys.","title":"@cache.memoize(...) -&gt; Callable[..., Any]"},{"location":"ref/#cachettl-int","text":"key: str \u2014 Cache key. How long the key is still valid in the cache in seconds. Returns -1 if the value for the key does not expire. Returns -2 if the value for the key has expired, or has not been set.","title":"@cache.ttl(...) -&gt; int"},{"location":"ref/#cachettl_many-dictstr-int","text":"keys: list[str] \u2014 List of cache keys. How long the given keys are still valid in the cache in seconds. Returns -1 if a value for the key does not expire. Returns -2 if a value for the key has expired, or has not been set.","title":"@cache.ttl_many(...) -&gt; dict[str, int]"},{"location":"ref/#cacheget_all_keys-liststr","text":"Get all keys that exist in the cache for currently valid cache items. Returns a list of cache keys in naturally sorted order.","title":"@cache.get_all_keys() -&gt; list[str]"},{"location":"ref/#cachefind_matching_keys-liststr","text":"like_match_pattern: str \u2013 A string formatted for SQL LIKE operator comparison. Find keys that match a SQL LIKE pattern. Returns a list of matching keys.","title":"@cache.find_matching_keys(...) -&gt; list[str]"},{"location":"ref/#cachefind_keys_starting_with-liststr","text":"pattern: str \u2013 The pattern to match at the start of the key. Find keys that start with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items.","title":"@cache.find_keys_starting_with(...) -&gt; list[str]"},{"location":"ref/#cachefind_keys_ending_with-liststr","text":"pattern: str \u2013 The pattern to match at the end of the key. Find keys that end with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items.","title":"@cache.find_keys_ending_with(...) -&gt; list[str]"},{"location":"ref/#cachefind_keys_containing-liststr","text":"pattern: str \u2013 The pattern to find in matching keys. Find keys that contain the given pattern anywhere in the string. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' . Returns a list of matching cache keys in sort order. Will only return keys that exist in the cache for currently valid cache items.","title":"@cache.find_keys_containing(...) -&gt; list[str]"},{"location":"ref/#cacheclear_matching_keys-none","text":"like_match_pattern: str \u2013 A string formatted for SQL LIKE operator comparison. Clear keys that match a SQL LIKE pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' .","title":"@cache.clear_matching_keys(...) -&gt; None"},{"location":"ref/#cacheclear_keys_starting_with-none","text":"pattern: str \u2013 The pattern to match at the start of the key. Clear all keys from the cache that start with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' .","title":"@cache.clear_keys_starting_with(...) -&gt; None"},{"location":"ref/#cacheclear_keys_ending_with-none","text":"pattern: str \u2013 The pattern to match at the end of the key. Clear all keys from the cache that end with the given pattern. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' .","title":"@cache.clear_keys_ending_with(...) -&gt; None"},{"location":"ref/#cacheclear_keys_containing-none","text":"pattern: str \u2013 The pattern to find in matching keys. Clear keys that contain the given pattern anywhere in the string. Matching follows the SQLite specification for the LIKE operator, so it will match 'A' to 'a' , but not '\u00c4' to '\u00e4' .","title":"@cache.clear_keys_containing(...) -&gt; None"}]}